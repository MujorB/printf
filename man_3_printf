." This is a comment, which begins always with a dot followed by a double quote
." Note that for the beginning of every man_page file, it begins with the Title Header which is introduced with the macro .TH
." .TH [name of program] [section number] [center footer] [left footer] [center header] this example is given here but with out a center header.... 
." .TH foo 1 "14 May 1999" "version 1.0"
." Begining of the man_page.
.TH _printf 3 " 17 04 2022" " version 1.0" "ALX  Printf Project Manual"
.SH NAME
_printf - function in the C progrmming language used to format text to stdout
.SH SYNOPSIS
." Synopsis section is used to show the command used to run your program, note that the empty line below helps give a newline effect
." Font attributes and ther various macros======= .B = bold, .BI = bold alternating italic, .BR = bold alternating Roman, .I = italic, .IB = italic alternating bold, .IR = italic alternating Roman,.RB = Roman alternating bold, .RI = Roman alternating italic
.B #include <stdio.h>

.B int

.B _printf(const char *format, ...)
.SH DESCRIPTION
." Note the DESCRIPTION SECTION contains the description of what your program does
The 
.I _printf()
function helps format string to the stdout, standard output stream.
.PP
These functions write the output under the control of a format string that specifies how subsequent argument (or arguments) accessed via the variable-length argument facilities of 
.B stdarg(3)) 
are converted for out-put.
." Another form of paragraphing is relative indent paragraphing. This is called as such because it indents all following paragraphs by 0.5 inches to the right. This is normally used in the FILES section (if you have it), or in other ways. There are two macros for this. The first is for relative indent start: RS, and the second is relative indent end: RE. Here is an example......
." Another paragraphing macro to add to your collection is IP. This is great for the OPTIONS section. What it does is takes one parameter. Anything on the next line will be indented and tabbed to the right. As always, here is an example you are expected to try out
.SH Conversion specifiers
A character that specifies the type of conversion to be applied.

.B The conversion specifiers and their meanings are:
.IP c
If no l modifier is present, the int argument is converted to an unsigned char, and the resulting character is written
.IP s
The char * argument is expected to be a pointer to an array of character type (pointer to a string).

Characters from the array are written up to (but not including) a terminating NUL character; if a precision is specified, no more than the specified are written, If a precision is given, no null character need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating NUL character.
.IP d,i
The int argument is converted to signed decimal notation, The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.  The default precision is 1. When 0 is printed with an explicit precision 0, the output is empty.
.SH RETURN VALUE
These functions return the number of characters printed (not including the trailing `\0' used to end output to strings), These functions return a negative value if an error occurs.
.SH BUGS
The _printf fuction in this program is still under development as my partner and I are yet to handle other specifier types, more updates would be included with time going forward
